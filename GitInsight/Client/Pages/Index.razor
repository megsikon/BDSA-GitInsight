@using Repo;
@using Repo.Entities;
@using System.Net.Http;
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Client.Shared;

@inject HttpClient Http
@inject NavigationManager NavManager

@page "/"



<h1>Hello, world!</h1>


<button>don't press me. really. i'm serious</button>

<input @bind="newRepoName" placeholder="New Repository Data" />
<button @onclick="AddItem">Add</button>

@* @if (allCommitData == null)
    {
    <p>No author data was found.</p>
    }
    else
    {
    <ul>
    @foreach (var item in allCommitData)
    {
    <li>@item.Name</li>
    }
    </ul>
    } *@





@code {
    private CommitData[]? allCommitData;
    private string? newHasCode;
    private string? newRepoName;
    private DateTime newDateTime;
    private string? newAuthorName;

}

<button onclick=@(async () => await PrintWebApiResponse())>Print Web API Response</button>

@* <button onclick=@(async () => await FillWithDemoData())>Fill with demo data</button>
    <button onclick=@(async () => await DeleteAllCustomers())>Delete all customers</button> *@

@if (allCommitData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table'>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Date</th>
            <th>Count</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var authorData in allCommitData)
            {
                <tr>
                    <td>@authorData.RepositoryName</td>
                    <td>@authorData.AuthorName</td>
                    <td>@authorData.Date</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        allCommitData = await Http.GetFromJsonAsync<CommitData[]>("api/CommitDataRepository/CD_ReadAll");
        await RefreshAllCommitData();
    }
    private async Task AddItem()
    {
        var addItem = new CommitData(newHasCode, newRepoName, newAuthorName, newDateTime)
        {
            //HashCode = newHasCode,
            //RepositoryName = newRepoName,
            //AuthorName = newAuthorName,
            //Date = newDateTime,
        };
        await Http.PostAsJsonAsync("api/CommitDataRepository/AD_Create", addItem);
        // NavManager.NavigateTo("/fetch-data-via-factory");
    }

    // THESE ARE PASTE:

    private async Task RefreshAllCommitData()
    {
        allCommitData = await Http.GetFromJsonAsync<CommitData[]>("api/CommitDataRepository/CD_ReadAll");
        StateHasChanged();
    }

    @* private async Task FillWithDemoData()
        {
        for (var i = 0; i < 10; i++)
        {
        await Http.SendJsonAsync(HttpMethod.Post, "/api/Customer", new Customer
        {
        FirstName = "Tom",
        LastName = $"Customer {i}",
        Department = i % 2 == 0 ? "Sales" : "Research"
        });
        }
        await RefreshCustomerList();
        } *@

    @* private async Task DeleteAllCustomers()
        {
        foreach (var c in Customers)
        {
        await Http.DeleteAsync($"/api/Customer/{c.ID}");
        }
        await RefreshCustomerList();
        } *@

    private async Task PrintWebApiResponse()
    {
        var response = await Http.GetStringAsync("api/AuthorDataRepository/AD_ReadAll");
        Console.WriteLine(response);
    }



}

@*
    <input type="checkbox" @bind="editItem.IsComplete" />
    <input @bind="editItem.Name" />
    <button @onclick="SaveItem">Save</button>
    @code {
    private string? id;
    private TodoItem editItem = new TodoItem();
    private void EditItem(long id)
    {
    editItem = todoItems.Single(i => i.Id == id);
    }
    private async Task SaveItem() =>
    await Http.PutAsJsonAsync($"api/TodoItems/{editItem.Id}", editItem);
    } *@